# -*- mode: ruby -*-
# vim: set ft=ruby :

MACHINES = {
  :pg01 => {
        :box_name => "ubuntu/focal64",
        :ip_addr => '192.168.11.191'
  },
  :pg02 => {
        :box_name => "ubuntu/focal64",
        :ip_addr => '192.168.11.192'
  },
  :pg03 => {
        :box_name => "ubuntu/focal64",
        :ip_addr => '192.168.11.193'
  },
  :pgBackup => {
        :box_name => "ubuntu/focal64",
        :ip_addr => '192.168.11.194'
  }
}

Vagrant.configure("2") do |config|

  MACHINES.each do |boxname, boxconfig|

    config.vm.define boxname do |box|

      box.vm.box = boxconfig[:box_name]
      box.vm.host_name = boxname.to_s

      box.vm.network "private_network", ip: boxconfig[:ip_addr]

      box.vm.provider :virtualbox do |vb|
        vb.customize ["modifyvm", :id, "--memory", "1024"]
      end
      box.vm.provision :shell do |s|
        s.inline = 'mkdir -p ~root/.ssh; cp ~vagrant/.ssh/auth* ~root/.ssh'
     end
    end
  end

  config.vm.provision "file", source: "files/authorized_keys", destination: "~/authorized_keys"
  config.vm.provision "shell", path: "./files/bootstrap.sh"
  config.vm.provision :ansible do |ansible|
    # ansible.verbose = 'vvvv'
    # https://martincarstenbach.wordpress.com/2019/04/11/ansible-tipsntricks-provision-multiple-machines-in-parallel-with-vagrant-and-ansible/

    # Disable default limit to connect to all the machines
    ansible.limit = "all"
    ansible.playbook = 'provisioning/check.yml'
    ansible.host_vars = {
      'pg01' => { 'host_ip' => '192.168.11.191' },
      'pg02' => { 'host_ip' => '192.168.11.192' },
      'pg03' => { 'host_ip' => '192.168.11.193' },
      'pgBackup' => { 'host_ip' => '192.168.11.194' }
    }
  end
end
