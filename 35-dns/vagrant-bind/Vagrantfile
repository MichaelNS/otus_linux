# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure(2) do |config|
  config.vm.box = "centos/7"

  config.vm.provider "virtualbox" do |v|
	  v.memory = 256
  end

  config.vm.define "ns01" do |ns01|
    ns01.vm.network "private_network", ip: "192.168.50.10", virtualbox__intnet: "dns"
    ns01.vm.hostname = "ns01"
  end

  config.vm.define "ns02" do |ns02|
    ns02.vm.network "private_network", ip: "192.168.50.11", virtualbox__intnet: "dns"
    ns02.vm.hostname = "ns02"
  end

  config.vm.define "client" do |client|
    client.vm.network "private_network", ip: "192.168.50.15", virtualbox__intnet: "dns"
    client.vm.hostname = "client"
  end

  config.vm.define "client2" do |client2|
    client2.vm.network "private_network", ip: "192.168.50.20", virtualbox__intnet: "dns"
    client2.vm.hostname = "client2"
  end


  config.vm.provision :ansible do |ansible|
    # ansible.verbose = 'vvvv'
    # ansible.playbook = 'provisioning/playbook.yml'
    # https://martincarstenbach.wordpress.com/2019/04/11/ansible-tipsntricks-provision-multiple-machines-in-parallel-with-vagrant-and-ansible/
    ansible.playbook = 'provisioning/check.yml'
    ansible.groups = {
      'nss' => ['ns01', 'ns02'],
      'clients' => ['client', 'client2']
    }
    ansible.host_vars = {
      'ns01' => { 'host_ip' => '192.168.50.10' },
      'ns02' => { 'host_ip' => '192.168.50.11' },
      'client' => { 'host_ip' => '192.168.50.15' },
      'client2' => { 'host_ip' => '192.168.50.20' }
    }
  end
end
