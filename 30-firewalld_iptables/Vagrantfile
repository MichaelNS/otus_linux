# -*- mode: ruby -*-
# vim: set ft=ruby :

MACHINES = {
  :inetRouter => {
    :box_name => "centos/7",
    :vm_name => "inetRouter",
    #:public => {:ip => '10.10.10.1', :adapter => 1},
    :net => [
      {ip: '192.168.255.1', adapter: 2, netmask: "255.255.255.252",virtualbox__intnet: "router-net"},
      {ip: '192.168.50.11', adapter: 8},
    ]
  },
  :centralRouter => {
    :box_name => "centos/7",
    :vm_name => "centralRouter",
    :net => [
      {ip: '192.168.255.2', adapter: 2, netmask: "255.255.255.252",virtualbox__intnet: "router-net"},
      {ip: '192.168.0.1', adapter: 3, netmask: "255.255.255.240",virtualbox__intnet: "central-net"},
      {ip: '192.168.255.9', adapter: 4, netmask: "255.255.255.252",virtualbox__intnet: "router2-net"},
      {ip: '192.168.50.12', adapter: 8},
    ]
  },
  :centralServer => {
    :box_name => "centos/7",
    :vm_name => "centralServer",
    :net => [
      {ip: '192.168.0.2', adapter: 2, netmask: "255.255.255.240",virtualbox__intnet: "central-net"},
      {ip: '192.168.50.13', adapter: 8},
    ]
  },
  :inetRouter2 => {
    :box_name => "centos/7",
    :vm_name => "inetRouter2",
    :net => [
      {ip: '192.168.255.10', adapter: 2, netmask: "255.255.255.252", virtualbox__intnet: "router2-net"},
      {ip: '192.168.50.14', adapter: 8}
    ]
  }
}

Vagrant.configure("2") do |config|
  MACHINES.each do |boxname, boxconfig|
    config.vm.define boxname do |box|
      box.vm.box = boxconfig[:box_name]
      box.vm.host_name = boxconfig[:vm_name]

      if boxconfig[:vm_name] == "inetRouter"
        box.vm.network "forwarded_port", guest: 8080, host: 9192, host_ip: "127.0.0.1", id: "http"
      end

      boxconfig[:net].each do |ipconf|
        box.vm.network "private_network", ipconf
      end
      if boxconfig.key?(:public)
        box.vm.network "public_network", boxconfig[:public]
      end
    end
  end

  config.vm.provision "file", source: "files/authorized_keys", destination: "~/authorized_keys"
  config.vm.provision "shell", path: "./files/bootstrap.sh"
  config.vm.provision :ansible do |ansible|
    # ansible.verbose = 'vvvv'
    # https://martincarstenbach.wordpress.com/2019/04/11/ansible-tipsntricks-provision-multiple-machines-in-parallel-with-vagrant-and-ansible/

    # Disable default limit to connect to all the machines
    ansible.limit = "all"
    ansible.playbook = 'provisioning/check.yml'
    ansible.groups = {
      'routers' => ['inetRouter', 'centralRouter', 'inetRouter2'],
      'servers' => ['centralServer']
    }
    ansible.host_vars = {
      'inetRouter' => { 'host_ip' => '192.168.50.11' },
      'centralRouter' => { 'host_ip' => '192.168.50.12' },
      'inetRouter2' => { 'host_ip' => '192.168.50.14' },

      'centralServer' => { 'host_ip' => '192.168.50.13' }
    }
  end
end
